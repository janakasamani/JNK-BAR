# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GetDrinkResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, ingredients: List[str]=None, drink_description: str=None, price: float=None, quantity: int=None, is_active: bool=None):  # noqa: E501
        """GetDrinkResponse - a model defined in Swagger

        :param name: The name of this GetDrinkResponse.  # noqa: E501
        :type name: str
        :param ingredients: The ingredients of this GetDrinkResponse.  # noqa: E501
        :type ingredients: List[str]
        :param drink_description: The drink_description of this GetDrinkResponse.  # noqa: E501
        :type drink_description: str
        :param price: The price of this GetDrinkResponse.  # noqa: E501
        :type price: float
        :param quantity: The quantity of this GetDrinkResponse.  # noqa: E501
        :type quantity: int
        :param is_active: The is_active of this GetDrinkResponse.  # noqa: E501
        :type is_active: bool
        """
        self.swagger_types = {
            'name': str,
            'ingredients': List[str],
            'drink_description': str,
            'price': float,
            'quantity': int,
            'is_active': bool
        }

        self.attribute_map = {
            'name': 'name',
            'ingredients': 'ingredients',
            'drink_description': 'drink_description',
            'price': 'price',
            'quantity': 'quantity',
            'is_active': 'is_active'
        }
        self._name = name
        self._ingredients = ingredients
        self._drink_description = drink_description
        self._price = price
        self._quantity = quantity
        self._is_active = is_active

    @classmethod
    def from_dict(cls, dikt) -> 'GetDrinkResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetDrinkResponse of this GetDrinkResponse.  # noqa: E501
        :rtype: GetDrinkResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this GetDrinkResponse.


        :return: The name of this GetDrinkResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GetDrinkResponse.


        :param name: The name of this GetDrinkResponse.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ingredients(self) -> List[str]:
        """Gets the ingredients of this GetDrinkResponse.


        :return: The ingredients of this GetDrinkResponse.
        :rtype: List[str]
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients: List[str]):
        """Sets the ingredients of this GetDrinkResponse.


        :param ingredients: The ingredients of this GetDrinkResponse.
        :type ingredients: List[str]
        """
        if ingredients is None:
            raise ValueError("Invalid value for `ingredients`, must not be `None`")  # noqa: E501

        self._ingredients = ingredients

    @property
    def drink_description(self) -> str:
        """Gets the drink_description of this GetDrinkResponse.


        :return: The drink_description of this GetDrinkResponse.
        :rtype: str
        """
        return self._drink_description

    @drink_description.setter
    def drink_description(self, drink_description: str):
        """Sets the drink_description of this GetDrinkResponse.


        :param drink_description: The drink_description of this GetDrinkResponse.
        :type drink_description: str
        """
        if drink_description is None:
            raise ValueError("Invalid value for `drink_description`, must not be `None`")  # noqa: E501

        self._drink_description = drink_description

    @property
    def price(self) -> float:
        """Gets the price of this GetDrinkResponse.


        :return: The price of this GetDrinkResponse.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this GetDrinkResponse.


        :param price: The price of this GetDrinkResponse.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def quantity(self) -> int:
        """Gets the quantity of this GetDrinkResponse.


        :return: The quantity of this GetDrinkResponse.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this GetDrinkResponse.


        :param quantity: The quantity of this GetDrinkResponse.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this GetDrinkResponse.


        :return: The is_active of this GetDrinkResponse.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this GetDrinkResponse.


        :param is_active: The is_active of this GetDrinkResponse.
        :type is_active: bool
        """
        if is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active
