# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GetOrdersResponseInner(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, quantity: int=None, price_paid: float=None):  # noqa: E501
        """GetOrdersResponseInner - a model defined in Swagger

        :param name: The name of this GetOrdersResponseInner.  # noqa: E501
        :type name: str
        :param quantity: The quantity of this GetOrdersResponseInner.  # noqa: E501
        :type quantity: int
        :param price_paid: The price_paid of this GetOrdersResponseInner.  # noqa: E501
        :type price_paid: float
        """
        self.swagger_types = {
            'name': str,
            'quantity': int,
            'price_paid': float
        }

        self.attribute_map = {
            'name': 'name',
            'quantity': 'quantity',
            'price_paid': 'price_paid'
        }
        self._name = name
        self._quantity = quantity
        self._price_paid = price_paid

    @classmethod
    def from_dict(cls, dikt) -> 'GetOrdersResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetOrdersResponse_inner of this GetOrdersResponseInner.  # noqa: E501
        :rtype: GetOrdersResponseInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this GetOrdersResponseInner.


        :return: The name of this GetOrdersResponseInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GetOrdersResponseInner.


        :param name: The name of this GetOrdersResponseInner.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def quantity(self) -> int:
        """Gets the quantity of this GetOrdersResponseInner.


        :return: The quantity of this GetOrdersResponseInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this GetOrdersResponseInner.


        :param quantity: The quantity of this GetOrdersResponseInner.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def price_paid(self) -> float:
        """Gets the price_paid of this GetOrdersResponseInner.


        :return: The price_paid of this GetOrdersResponseInner.
        :rtype: float
        """
        return self._price_paid

    @price_paid.setter
    def price_paid(self, price_paid: float):
        """Sets the price_paid of this GetOrdersResponseInner.


        :param price_paid: The price_paid of this GetOrdersResponseInner.
        :type price_paid: float
        """
        if price_paid is None:
            raise ValueError("Invalid value for `price_paid`, must not be `None`")  # noqa: E501

        self._price_paid = price_paid
